#include "precomp_dboclient.h"
#include "PacketTracer.h"

// core
#include "NtlDebug.h"

// shared
#include "NtlPacketAU.h"
#include "NtlPacketCU.h"
#include "NtlPacketGU.h"
#include "NtlPacketTU.h"
#include "NtlPacketUA.h"
#include "NtlPacketUC.h"
#include "NtlPacketUG.h"
#include "NtlPacketUT.h"

// simulation
#include "NtlSLDef.h"
#include "NtlSLGlobal.h"
#include "NtlSob.h"
#include "NtlSobAvatar.h"
#include "NtlSobManager.h"
#include "NtlSLEventFunc.h"
#include "NtlSLLogic.h"

// cleint
#include "DumpCommand.h"
#include "DboGlobal.h"

#define	PACKETNAME_INSERT(name)		m_mapPacketName.insert(PacketEnumNameMap::value_type(name, #name))

CPacketTracer* CPacketTracer::m_pInstance = NULL;

CPacketTracer* CPacketTracer::GetInstance()
{
	return m_pInstance;
}

void CPacketTracer::CreateInstance()
{
#ifndef _ENABLE_PACKET_TRACE_
	return;
#endif

	if(NULL == m_pInstance)
	{
		m_pInstance = NTL_NEW CPacketTracer;
		m_pInstance->Create();
	}
}

void CPacketTracer::DeleteInstance()
{
#ifndef _ENABLE_PACKET_TRACE_
	return;
#endif
	if(m_pInstance)
	{
		m_pInstance->Destroy();
		NTL_DELETE(m_pInstance);
	}
}

CPacketTracer::CPacketTracer()
{
	m_bAvtivate = FALSE;
	m_eTraceMode = CAPTURE_ALL;
}

CPacketTracer::~CPacketTracer()
{

}

void CPacketTracer::SetRangeOpCode(int iMin, int iMax)
{
	m_iMinOpCode = iMin;
	if(-1 != iMax)
		m_iMaxOpCode = iMax;
}

void CPacketTracer::SetTraceMode(TRACE_MODE eTraceMode)
{
	m_eTraceMode = eTraceMode;
}

const char* CPacketTracer::GetPacketName(int iOpCode)
{
	PacketEnumNameMap::iterator iter = m_mapPacketName.find(iOpCode);

	if(m_mapPacketName.end() != iter)
	{
		return iter->second.c_str();
	}
	else
		return NULL;
}

void CPacketTracer::Activate()
{
	m_bAvtivate = TRUE;
}

void CPacketTracer::Deactivate()
{
	m_bAvtivate = FALSE;
}

void CPacketTracer::Process(sNTLPACKETHEADER* pPacket, RwBool bReceive)
{
	if(true == m_bAvtivate)
	{
		if(pPacket->wOpCode >= m_iMinOpCode && pPacket->wOpCode <= m_iMaxOpCode)
		{
			char pcFileNameTemp[150];
			char pcFileNameTemp2[300];
			/// dump....
			const char* pcName = GetPacketName(pPacket->wOpCode);

			if(pcName)
				strncpy(pcFileNameTemp, pcName, 150);
			else
				sprintf_s(pcFileNameTemp, 150, "UnknownPacket: %d", pPacket->wOpCode);
			pcFileNameTemp[149] = NULL;

			if(true == bReceive)
				sprintf_s(pcFileNameTemp2, 300, "Receive: %s	%d\n", pcFileNameTemp, timeGetTime());
			else
				sprintf_s(pcFileNameTemp2, 300, "Send   : %s	%d\n", pcFileNameTemp, timeGetTime());

			pcFileNameTemp2[299] = NULL;

			GetDumpCmdManager()->OutputDump(pcFileNameTemp2);
		}
	}
}

VOID CPacketTracer::HandleEvents( RWS::CMsg& msg )
{
	if(msg.Id == g_EventNotifySendPacket && (CAPTURE_ALL == m_eTraceMode || CAPTURE_SEND == m_eTraceMode))
		Process((sNTLPACKETHEADER*) msg.pData, FALSE);
	else if(msg.Id == g_EventNotifyReceivePacket && (CAPTURE_ALL == m_eTraceMode || CAPTURE_RECEIVE == m_eTraceMode))
		Process((sNTLPACKETHEADER*) msg.pData, TRUE);
}

void CPacketTracer::Destroy()
{
	UnLinkMsg(g_EventNotifySendPacket);
	UnLinkMsg(g_EventNotifyReceivePacket);
}

void CPacketTracer::Create()
{
	LinkMsg(g_EventNotifySendPacket, 0);
	LinkMsg(g_EventNotifyReceivePacket, 0);

	SetRangeOpCode(0, 0x7fffffff);

#ifdef _ENABLE_PACKET_TRACE_	/// 프로토콜이 변경될수있다. 자동빌드가 실패할 수 있음
	m_mapPacketName.insert(PacketEnumNameMap::value_type(AU_LOGIN_RES, "AU_LOGIN_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(AU_LOGIN_DISCONNECT_RES, "AU_LOGIN_DISCONNECT_RES"));

	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_SERVER_FARM_INFO, "CU_SERVER_FARM_INFO"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_SERVER_CHANNEL_INFO, "CU_SERVER_CHANNEL_INFO"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_LOGIN_RES, "CU_LOGIN_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_SERVERLIST_RES, "CU_CHARACTER_SERVERLIST_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_SERVERLIST_ONE_RES, "CU_CHARACTER_SERVERLIST_ONE_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_ADD_RES, "CU_CHARACTER_ADD_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_DEL_RES, "CU_CHARACTER_DEL_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_SELECT_RES, "CU_CHARACTER_SELECT_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_INFO, "CU_CHARACTER_INFO"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_LOAD_RES, "CU_CHARACTER_LOAD_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_EXIT_RES, "CU_CHARACTER_EXIT_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_DEL_CANCEL_RES, "CU_CHARACTER_DEL_CANCEL_RES"));
	//m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_DEL_INFO, "CU_CHARACTER_DEL_INFO"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_DISCONNECTED_NFY, "CU_DISCONNECTED_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_SERVER_FARM_INFO_REFRESHED_NFY, "CU_SERVER_FARM_INFO_REFRESHED_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_SERVER_CHANNEL_INFO_REFRESHED_NFY, "CU_SERVER_CHANNEL_INFO_REFRESHED_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CONNECT_WAIT_CHECK_RES, "CU_CONNECT_WAIT_CHECK_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CONNECT_WAIT_COUNT_NFY, "CU_CONNECT_WAIT_COUNT_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CONNECT_WAIT_CANCEL_RES, "CU_CONNECT_WAIT_CANCEL_RES"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CONNECT_WAIT_CANCEL_NFY, "CU_CONNECT_WAIT_CANCEL_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_NETMARBLEMEMBERIP_NFY, "CU_NETMARBLEMEMBERIP_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_DEL_NFY, "CU_CHARACTER_DEL_NFY"));
	m_mapPacketName.insert(PacketEnumNameMap::value_type(CU_CHARACTER_RENAME_RES, "CU_CHARACTER_RENAME_RES"));

	PACKETNAME_INSERT( GU_PONG );
	PACKETNAME_INSERT( GU_SESSION_STATE_WRONG );
	PACKETNAME_INSERT( GU_CHAR_STATE_WRONG );
	PACKETNAME_INSERT( GU_GAME_ENTER_RES );
	PACKETNAME_INSERT( GU_GAME_LEAVE_RES );
	PACKETNAME_INSERT( GU_ENTER_WORLD_RES );
	PACKETNAME_INSERT( GU_ENTER_WORLD_COMPLETE );
	PACKETNAME_INSERT( GU_AUTH_KEY_FOR_COMMUNITY_SERVER_RES );
	PACKETNAME_INSERT( GU_AVATAR_CHAR_INFO );
	PACKETNAME_INSERT( GU_AVATAR_ITEM_INFO );
	PACKETNAME_INSERT( GU_AVATAR_SKILL_INFO );
	PACKETNAME_INSERT( GU_AVATAR_HTB_INFO );
	PACKETNAME_INSERT( GU_AVATAR_BUFF_INFO );
	PACKETNAME_INSERT( GU_AVATAR_WORLD_INFO );
	PACKETNAME_INSERT( GU_AVATAR_ZONE_INFO );
	PACKETNAME_INSERT( GU_AVATAR_QUEST_COMPLETE_INFO );
	PACKETNAME_INSERT( GU_AVATAR_QUEST_PROGRESS_INFO );
	PACKETNAME_INSERT( GU_AVATAR_QUEST_INVENTORY_INFO );
	PACKETNAME_INSERT( GU_AVATAR_INFO_END );
	PACKETNAME_INSERT( GU_AVATAR_ATTRIBUTE_UPDATE );
	PACKETNAME_INSERT( GU_OBJECT_CREATE );
	PACKETNAME_INSERT( GU_OBJECT_DESTROY );
	PACKETNAME_INSERT( GU_CHAR_MOVE );
	PACKETNAME_INSERT( GU_CHAR_DEST_MOVE );
	PACKETNAME_INSERT( GU_CHAR_CHANGE_HEADING );
	PACKETNAME_INSERT( GU_CHAR_CHANGE_JUMP_DIRECTION );
	PACKETNAME_INSERT( GU_CHAR_CHANGE_DIRECTION_ON_FLOATING );
	PACKETNAME_INSERT( GU_CHAR_FOLLOW_MOVE );
	PACKETNAME_INSERT( GU_CHAR_JUMP );
	PACKETNAME_INSERT( GU_CHAR_JUMP_END );
	PACKETNAME_INSERT( GU_CHAR_FIGHTMODE );
	PACKETNAME_INSERT( GU_CHAR_BLOCK_MODE_COOL_TIME_NFY );
	PACKETNAME_INSERT( GU_CHAR_CAMPING );
	PACKETNAME_INSERT( GU_CHAR_FAINT );
	PACKETNAME_INSERT( GU_CHAR_KNOCKDOWN );
	PACKETNAME_INSERT( GU_CHAR_SLIDING );
	PACKETNAME_INSERT( GU_CHAR_CONVERT_CLASS );
	PACKETNAME_INSERT( GU_AVATAR_ATTRIBUTE_UPDATE );
	PACKETNAME_INSERT( GU_CHAR_DIALOG );
	PACKETNAME_INSERT( GU_CHAR_DIRECT_PLAY );
	PACKETNAME_INSERT( GU_CHAR_DIRECT_PLAY_END );
	PACKETNAME_INSERT( GU_CHAR_AWAY_RES );
	PACKETNAME_INSERT( GU_CHAR_MAIL_INFO );
	PACKETNAME_INSERT( GU_CHAR_KEY_INFO );
	PACKETNAME_INSERT( GU_CHAR_RANKBATTLE_SCORE );
	PACKETNAME_INSERT( GU_CHAR_KEY_UPDATE_RES );
	PACKETNAME_INSERT( GU_CHAR_ACTION_ATTACK );
	PACKETNAME_INSERT( GU_CHAR_ACTION_SKILL );
	PACKETNAME_INSERT( GU_CHAR_ACTION_ITEM );
	PACKETNAME_INSERT( GU_CHAR_REVIVAL_RES );
	PACKETNAME_INSERT( GU_CHAR_TELEPORT_RES );
	PACKETNAME_INSERT( GU_CHAR_BIND_RES );
	PACKETNAME_INSERT( GU_CHAR_SERVER_CHANGE_RES );
	PACKETNAME_INSERT( GU_CHAR_CHANNEL_CHANGE_RES );
	PACKETNAME_INSERT( GU_CHAR_EXIT_RES );
	PACKETNAME_INSERT( GU_CHAR_SKILL_RES );
	PACKETNAME_INSERT( GU_GAME_EXIT_RES );
	PACKETNAME_INSERT( GU_GAME_KICK_NFY );
	PACKETNAME_INSERT( GU_EFFECT_AFFECTED );
	PACKETNAME_INSERT( GU_SKILL_CASTING_CANCELED_NFY );
	PACKETNAME_INSERT( GU_SKILL_CASTING_DELAYED_NFY );
	PACKETNAME_INSERT( GU_SKILL_AFFECTING_CANCELED_NFY );
	PACKETNAME_INSERT( GU_SKILL_TARGET_LIST_REQ );
	PACKETNAME_INSERT( GU_SKILL_LEARN_RES );
	PACKETNAME_INSERT( GU_SKILL_LEARNED_NFY );
	PACKETNAME_INSERT( GU_SKILL_UPGRADE_RES );
	PACKETNAME_INSERT( GU_SKILL_RP_BONUS_SETTING_RES );
	PACKETNAME_INSERT( GU_SKILL_NOTIFY_EXP );
	PACKETNAME_INSERT( GU_SKILL_AFTEREFFECT_REMAINING_TIME_NFY );
	PACKETNAME_INSERT( GU_SKILL_COOL_TIME_STARTED_NFY );				
	PACKETNAME_INSERT( GU_HTB_START_RES );
	PACKETNAME_INSERT( GU_HTB_LEARN_RES ); 
	PACKETNAME_INSERT( GU_HTB_FORWARD_RES ); 
	PACKETNAME_INSERT( GU_HTB_RP_BALL_USE_RES );
	PACKETNAME_INSERT( GU_HTB_RP_BALL_USED_NFY );
	PACKETNAME_INSERT( GU_HTB_RP_BALL_RESULT_DECIDED_NFY );
	PACKETNAME_INSERT( GU_BUFF_REGISTERED );
	PACKETNAME_INSERT( GU_BUFF_DROPPED );
	PACKETNAME_INSERT( GU_BUFF_REFRESH_ALL );
	PACKETNAME_INSERT( GU_BUFF_DROP_RES );				
	PACKETNAME_INSERT( GU_ITEM_CREATE );
	PACKETNAME_INSERT( GU_ITEM_UPDATE );
	PACKETNAME_INSERT( GU_ITEM_MOVE_RES );
	PACKETNAME_INSERT( GU_ITEM_MOVE_STACK_RES );
	PACKETNAME_INSERT( GU_ITEM_DELETE );
	PACKETNAME_INSERT( GU_ITEM_DELETE_RES );
	PACKETNAME_INSERT( GU_ITEM_EQUIP_REPAIR_RES );			// 수리 완료 응답
	PACKETNAME_INSERT( GU_ITEM_REPAIR_RES );
	PACKETNAME_INSERT( GU_ITEM_USE_RES ); // 아이템 사용 요청에 대한 결과
	PACKETNAME_INSERT( GU_ITEM_CASTING_CANCELED );		// 아이템 캐스팅이 취소되었음을 알림
	PACKETNAME_INSERT( GU_ITEM_CASTING_DELAYED_NFY );					// 아이템 캐스팅이 지연되었음을 알림
	PACKETNAME_INSERT( GU_ITEM_DUR_DOWN );
	PACKETNAME_INSERT( GU_ITEM_DUR_UPDATE );
	PACKETNAME_INSERT( GU_ITEM_STACK_UPDATE );
	PACKETNAME_INSERT( GU_ITEM_UPGRADE_RES );
	PACKETNAME_INSERT( GU_ITEM_IDENTIFY_RES );
	PACKETNAME_INSERT( GU_ITEM_PICK_RES );
	PACKETNAME_INSERT( GU_ZENNY_PICK_RES );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_STATE );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_ASPECT_STATE );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_CONDITION );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_EXP );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_LEVEL );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_SPEED );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_ATTACK_SPEEDRATE );
	PACKETNAME_INSERT( GU_UPDATE_ITEM_EQUIP );	// neighbor pc에만 전달한다.
	PACKETNAME_INSERT( GU_UPDATE_ITEM_DELETED );	// 
	PACKETNAME_INSERT( GU_UPDATE_CHAR_LP );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_EP );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_RP ); 
	PACKETNAME_INSERT( GU_UPDATE_CHAR_LP_EP );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_ZENNY );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_MUDOSA_POINT );
	PACKETNAME_INSERT( GU_SYSTEM_DISPLAY_TEXT ); // 텍스트 디스플레이
	PACKETNAME_INSERT( GU_SYSTEM_DISPLAY_RESULTCODE );	// ResultCode 텍스트를 클라이언트에 출력한다.
	PACKETNAME_INSERT( GU_SHOP_START_RES );
	PACKETNAME_INSERT( GU_SHOP_BUY_RES );
	PACKETNAME_INSERT( GU_SHOP_SELL_RES );
	PACKETNAME_INSERT( GU_SHOP_END_RES );
	PACKETNAME_INSERT( GU_PARTY_CREATE_RES );
	PACKETNAME_INSERT( GU_PARTY_DISBAND_RES );
	PACKETNAME_INSERT( GU_PARTY_DISBANDED_NFY );
	PACKETNAME_INSERT( GU_PARTY_INVITE_RES );
	PACKETNAME_INSERT( GU_PARTY_INVITE_NFY );
	PACKETNAME_INSERT( GU_PARTY_RESPONSE_INVITATION_RES );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_JOINED_NFY );
	PACKETNAME_INSERT( GU_PARTY_INFO );
	PACKETNAME_INSERT( GU_PARTY_INVITATION_DECLINED_NFY );
	PACKETNAME_INSERT( GU_PARTY_INVITATION_EXPIRED_NFY );
	PACKETNAME_INSERT( GU_PARTY_LEAVE_RES );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_LEFT_NFY );
	PACKETNAME_INSERT( GU_PARTY_KICK_OUT_RES );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_KICKED_OUT_NFY );
	PACKETNAME_INSERT( GU_PARTY_CHANGE_LEADER_RES );
	PACKETNAME_INSERT( GU_PARTY_LEADER_CHANGED_NFY );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_LEVELED_UP_NFY );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_CLASS_CHANGED_NFY );
	PACKETNAME_INSERT( GU_PARTY_CHANGE_ZENNY_LOOTING_METHOD_RES );
	PACKETNAME_INSERT( GU_PARTY_ZENNY_LOOTING_METHOD_CHANGED_NFY );
	PACKETNAME_INSERT( GU_PARTY_CHANGE_ITEM_LOOTING_METHOD_RES );
	PACKETNAME_INSERT( GU_PARTY_ITEM_LOOTING_METHOD_CHANGED_NFY );
	PACKETNAME_INSERT( GU_PARTY_ZENNY_LOOTING_METHOD_UNLOCKED_NFY );
	PACKETNAME_INSERT( GU_PARTY_ITEM_LOOTING_METHOD_UNLOCKED_NFY );
	PACKETNAME_INSERT( GU_PARTY_ZENNY_UPDATED_NFY );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_GAINED_ITEM_NFY );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_GAINED_ZENNY_NFY );
	PACKETNAME_INSERT( GU_PARTY_MEMBER_LOCATION_NFY );
	PACKETNAME_INSERT( GU_BANK_START_RES );
	PACKETNAME_INSERT( GU_BANK_MOVE_RES );
	PACKETNAME_INSERT( GU_BANK_MOVE_STACK_RES );
	PACKETNAME_INSERT( GU_BANK_END_RES );
	PACKETNAME_INSERT( GU_BANK_ZENNY_INFO );
	PACKETNAME_INSERT( GU_BANK_ITEM_INFO );
	PACKETNAME_INSERT( GU_BANK_ZENNY_RES );
	PACKETNAME_INSERT( GU_BANK_BUY_RES );
	PACKETNAME_INSERT( GU_BANK_ITEM_DELETE_RES );
	PACKETNAME_INSERT( GU_SOCIAL_ACTION ); // Social Action 사용
	PACKETNAME_INSERT( GU_SCOUTER_INDICATOR_RES ); // 스카우터 전투력측정 결과
	PACKETNAME_INSERT( GU_SCOUTER_PREDICT_RES );
	PACKETNAME_INSERT( GU_SCOUTER_EQUIP_CHECK_RES );
	PACKETNAME_INSERT( GU_SCOUTER_CHIP_REMOVE_ALL_RES );
	PACKETNAME_INSERT( GU_TS_CONFIRM_STEP_RES );							// 트리거 단계 진행 응답
	PACKETNAME_INSERT( GU_TS_UPDATE_SYNC_NFY );							// 트리거 동기 진행 알림
	PACKETNAME_INSERT( GU_TS_UPDATE_STATE );								// 트리거 실패 상태 업데이트
	PACKETNAME_INSERT( GU_TS_UPDATE_EVENT_NFY );							// 트리거 이벤트 업데이트
	PACKETNAME_INSERT( GU_TS_EXCUTE_TRIGGER );							// 클라이언트 트리거 강제 실행
	PACKETNAME_INSERT( GU_TS_EXCUTE_TRIGGER_OBJECT_RES );				//
	PACKETNAME_INSERT( GU_TS_TRIGGER_OBJECT_DIALOG_NFY );				// TriggerObject Conversation
	PACKETNAME_INSERT( GU_TS_PC_DIALOG_NFY );							// PC Conversation
	PACKETNAME_INSERT( GU_TS_SKIP_CONTAINER );
	PACKETNAME_INSERT( GU_QUEST_ITEM_CREATE_NFY );						// 퀘스트 아이템 생성 알림
	PACKETNAME_INSERT( GU_QUEST_ITEM_DELETE_NFY );						// 퀘스트 아이템 삭제 알림
	PACKETNAME_INSERT( GU_QUEST_ITEM_UPDATE_NFY );						// 퀘스트 아이템 변경 알림
	PACKETNAME_INSERT( GU_QUEST_ITEM_MOVE_RES );							// 퀘스트 아이템 이동 응답
	PACKETNAME_INSERT( GU_QUEST_ITEM_DELETE_RES );						// 퀘스트 아이템 삭제 응답
	PACKETNAME_INSERT( GU_QUEST_SVREVT_START_NFY );						// 퀘스트 이벤트 시작
	PACKETNAME_INSERT( GU_QUEST_SVREVT_END_NFY );						// 퀘스트 이벤트 종료
	PACKETNAME_INSERT( GU_QUEST_SVREVT_UPDATE_NFY );						// 퀘스트 이벤트 업데이트
	PACKETNAME_INSERT( GU_QUEST_GIVEUP_RES );							// 퀘스트 포기 응답
	PACKETNAME_INSERT( GU_QUEST_SHARE_NFY );								// 퀘스트 공유
	PACKETNAME_INSERT( GU_QUEST_RESET_NFY );								// 퀘스트의 지정된 범위만큼 진행 정보와 완료 정보를 삭제한다.
	PACKETNAME_INSERT( GU_QUEST_OBJECT_VISIT_RES );						// npc ); tobject 방문 이벤트
	PACKETNAME_INSERT( GU_QUEST_FORCED_COMPLETION_NFY );					// 퀘스트 강제 완료 설정(테스트용)
	PACKETNAME_INSERT( GU_FREEBATTLE_CHALLENGE_RES );					// 프리배틀 대전 신청 응답
	PACKETNAME_INSERT( GU_FREEBATTLE_ACCEPT_REQ );						// 프리배틀 대전수락 요청
	PACKETNAME_INSERT( GU_FREEBATTLE_CANCEL_NFY );						// 프리배틀 대전 취소
	PACKETNAME_INSERT( GU_FREEBATTLE_START_NFY );						// 프리배틀 대전 시작
	PACKETNAME_INSERT( GU_FREEBATTLE_OUTSIDE_NFY );						// 프리배틀 대전범위 벗어남
	PACKETNAME_INSERT( GU_FREEBATTLE_INSIDE_NFY );						// 프리배틀 대전범위 들어옴
	PACKETNAME_INSERT( GU_FREEBATTLE_END_NFY );							// 프리배틀 대전 종료
	PACKETNAME_INSERT( GU_QUICK_SLOT_UPDATE_RES );						// 퀵슬롯업데이트
	PACKETNAME_INSERT( GU_QUICK_SLOT_DEL_NFY );							// 퀵슬롯 삭제	
	PACKETNAME_INSERT( GU_QUICK_SLOT_INFO );								// QuickSlot Load
	PACKETNAME_INSERT( GU_PET_CHAR_INFO );
	PACKETNAME_INSERT( GU_PET_SKILL_INFO );
	PACKETNAME_INSERT( GU_PET_INFO_END );
	PACKETNAME_INSERT( GU_PET_DESPAWNED_NFY );							// 펫의 사라짐
	PACKETNAME_INSERT( GU_PET_DISMISS_PET_RES );							// 펫의 소환 취소 요청 결과
	PACKETNAME_INSERT( GU_ACTION_REPORT_MESSAGE );						// 표시하고 싶은 메세지를 리져트 코드 인덱스를 첨부하여 보내면 클라이언트는 표시한다.
	PACKETNAME_INSERT( GU_TRADE_START_NFY );
	PACKETNAME_INSERT( GU_TRADE_START_RES );
	PACKETNAME_INSERT( GU_TRADE_OK_REQ );
	PACKETNAME_INSERT( GU_TRADE_ADD_NFY );
	PACKETNAME_INSERT( GU_TRADE_ADD_RES );
	PACKETNAME_INSERT( GU_TRADE_DEL_NFY );
	PACKETNAME_INSERT( GU_TRADE_DEL_RES );
	PACKETNAME_INSERT( GU_TRADE_MODIFY_NFY );
	PACKETNAME_INSERT( GU_TRADE_MODIFY_RES );
	PACKETNAME_INSERT( GU_TRADE_ZENNY_UPDATE_NFY );
	PACKETNAME_INSERT( GU_TRADE_ZENNY_UPDATE_RES );
	PACKETNAME_INSERT( GU_TRADE_END_NFY );
	PACKETNAME_INSERT( GU_TRADE_END_RES );
	PACKETNAME_INSERT( GU_TRADE_CANCEL_NFY );
	PACKETNAME_INSERT( GU_TRADE_CANCEL_RES );
	PACKETNAME_INSERT( GU_TRADE_DENY_RES );
	PACKETNAME_INSERT( GU_GUILD_NAME_CHANGED_NFY );					// 길드 이름 변경 알림
	PACKETNAME_INSERT( GU_GUILD_CREATE_RES );						// 길드 생성 요청 결과
	PACKETNAME_INSERT( GU_GUILD_INVITE_RES );						// 길드 초대 결과
	PACKETNAME_INSERT( GU_TOBJECT_UPDATE_STATE );						// 트리거 오브젝트 상태 업데이트
	PACKETNAME_INSERT( GU_TOBJECT_ACTION_ATTACK );						// 트리거 오브젝트 데미지
	PACKETNAME_INSERT( GU_TUTORIAL_HINT_UPDATE_RES );					// 힌트 플래그 업데이트
	PACKETNAME_INSERT( GU_TELECAST_MESSAGE_BEG_NFY );					// 방송 메시지 통지 시작
	PACKETNAME_INSERT( GU_TELECAST_MESSAGE_END_NFY );					// 방송 메시지 통지 종료
	PACKETNAME_INSERT( GU_BROAD_MESSAGE_BEG_NFY );						// 방송 메시지 시작
	PACKETNAME_INSERT( GU_BROAD_MESSAGE_END_NFY );						// 방송 메시지 끝
	PACKETNAME_INSERT( GU_MINI_NARRATION_NFY );							// 미니나레이션
	PACKETNAME_INSERT( GU_PROGRESS_MESSAGE_NFY );						// 타임머신 진행 메시지 통지
	PACKETNAME_INSERT( GU_DIRECTION_INDICATE_NFY );						// 방향지시 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_START_NFY );							// 타임머신 퀘스트 시작 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_START_EXCEPTION_NFY );				// 타임머신 퀘스트 월드에 진입 실패함(성공시에는 전송되지 않는다.)
	PACKETNAME_INSERT( GU_TIMEQUEST_LEAVE_NFY );							// 타임머신 퀘스트 퇴장 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_COUNTDOWN_NFY );						// 타임머신 퀘스트 카운트다운 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_REWARD_NFY );						// 타임머신 퀘스트 보상 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_INFORMATION_NFY );				// 타임머신 퀘스트 스테이지 정보 통지
	PACKETNAME_INSERT( GU_TIMEQUEST_UPDATE_GAME_STATE );					// 타임머신 퀘스트 게임 상태 업데이트
	PACKETNAME_INSERT( GU_TIMEQUEST_UPDATE_KILL_COUNT );					// 타임머신 퀘스트 플레이어 킬 카운트 업데이트
	PACKETNAME_INSERT( GU_TIMEQUEST_UPDATE_COUPON_COUNT );				// 타임머신 퀘스트 쿠폰정보 업데이트
	PACKETNAME_INSERT( GU_TIMEQUEST_UPDATE_TMQ_POINT );					// 타임머신 퀘스트 TMQ 포인트 업데이트
	PACKETNAME_INSERT( GU_TIMEQUEST_UPDATE_GAME_TIME );					// 타임머신 퀘스트 게임 시간 업데이트
	PACKETNAME_INSERT( GU_RANKBATTLE_INFO_RES );							// 기본 정보
	PACKETNAME_INSERT( GU_RANKBATTLE_JOIN_RES );							// 신청
	PACKETNAME_INSERT( GU_RANKBATTLE_JOIN_NFY );							// member 에게 신청 알림
	PACKETNAME_INSERT( GU_RANKBATTLE_LEAVE_RES );						// 취소
	PACKETNAME_INSERT( GU_RANKBATTLE_LEAVE_NFY );						// 취소 파티원 알림
	PACKETNAME_INSERT( GU_RANKBATTLE_MATCH_START_NFY );					// 경기 시작
	PACKETNAME_INSERT( GU_RANKBATTLE_MATCH_CANCELED_NFY );				// 경기가 취소됨
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_STATE_UPDATE_NFY );			// RankBattle Battle State를 업데이트(경기장의 상태)
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_TEAM_INFO_NFY );				// RankBattle Team 정보를 알림
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_PLAYER_STATE_NFY );			// RankBattle Player의 상태 알림(장외 ); 죽음등)
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_KILLSCORE_UPDATE_NFY );		// RankBattle KillScore 업데이트
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_STAGE_FINISH_NFY );			// RankBattle Stage Finish - Stage 마침
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_MATCH_FINISH_NFY );			// RankBattle Battle Finish - 경기 마침
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_END_NFY );					// RankBattle이 끝날때 pc에게 알림(PC 마다 Battle이 끝나는 시점이 다르므로)
	PACKETNAME_INSERT( GU_RANKBATTLE_BATTLE_FORCED_LEAVE_NFY );			// RankBattle 에서 강제적으로 WorldLeave 됨(너무 오랜 로딩 상태 등)
	PACKETNAME_INSERT( GU_RANKBATTLE_TOTAL_SCORE_UPDATE_NFY );			// 개인 전적 업데이트
	PACKETNAME_INSERT( GU_DRAGONBALL_CHECK_RES );						// 드래곤볼 UI 7개 배치OK
	PACKETNAME_INSERT( GU_DRAGONBALL_REWARD_RES );						// 드래곤볼 다 모음에 대한 보상 선택 요청
	PACKETNAME_INSERT( GU_DRAGONBALL_COLLECT_NFY );						// 드래곤볼 스케쥴 타임 오버통보
	PACKETNAME_INSERT( GU_DRAGONBALL_SCHEDULE_INFO );						// 드래곤볼 수집기간 정보
	PACKETNAME_INSERT( GU_PRIVATESHOP_CREATE_RES );							// 개인상점을 생성 [6/28/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_CREATE_NFY );							// 개인상점 예외 [1/31/2008 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_EXIT_RES );							// 개인상점을 닫는다[6/28/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_OPEN_RES );							// 개인상점에 상태를 Open으로 해주세요[6/28/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_OPEN_NFY );							// [7/31/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_CLOSE_RES );							// 개인상점에 상태를 Close으로 해주세요[6/28/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_CLOSE_NFY );							// [7/31/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_INSERT_RES );						// 개인상점에 아이템 추가 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_UPDATE_RES );						// 개인상점에 아이템 수정 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_DELETE_RES );						// 개인상점에 아이템 삭제 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_BUYING_RES );						// 아이템 구매 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_BUYING_NFY );						// [7/31/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ENTER_RES );							// 손님 입장 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_LEAVE_RES );							// 손님 퇴장 응답[6/29/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_DATA_INFO );						// 아이템 데이타 [7/2/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_SELECT_RES );						// [7/19/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_SELECT_NFY );						// [7/19/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_ITEM_STATE_NFY );						// [7/31/2007 SGpro]
	PACKETNAME_INSERT( GU_PRIVATESHOP_LEAVE_NFY );							// [8/3/2007 SGpro]
	PACKETNAME_INSERT( GU_TUTORIAL_WAIT_NFY );								// 튜토리얼 대기 알림 
	PACKETNAME_INSERT( GU_TUTORIAL_WAIT_CANCEL_RES );						// 튜토리얼 대기 취소 요청 응답
	PACKETNAME_INSERT( GU_TUTORIAL_PLAY_QUIT_RES );							// 튜토리얼 플레이 취소 요청 응답
	PACKETNAME_INSERT( GU_MAIL_START_RES );
	PACKETNAME_INSERT( GU_MAIL_SEND_RES );
	PACKETNAME_INSERT( GU_MAIL_READ_RES );
	PACKETNAME_INSERT( GU_MAIL_RELOAD_NFY );
	PACKETNAME_INSERT( GU_MAIL_DEL_RES );
	PACKETNAME_INSERT( GU_MAIL_RETURN_RES );
	PACKETNAME_INSERT( GU_MAIL_RELOAD_RES );
	PACKETNAME_INSERT( GU_MAIL_LOAD_RES );
	PACKETNAME_INSERT( GU_MAIL_LOAD_DATA );
	PACKETNAME_INSERT( GU_MAIL_LOAD_INFO );
	PACKETNAME_INSERT( GU_MAIL_ITEM_RECEIVE_RES );
	PACKETNAME_INSERT( GU_MAIL_LOCK_RES );
	PACKETNAME_INSERT( GU_MAIL_CLOSE_NFY );
	PACKETNAME_INSERT( GU_MAIL_MULTI_DEL_RES );
	PACKETNAME_INSERT( GU_PORTAL_INFO );
	PACKETNAME_INSERT( GU_PORTAL_ADD_RES );
	PACKETNAME_INSERT( GU_PORTAL_RES );
	PACKETNAME_INSERT( GU_WAR_FOG_INFO );
	PACKETNAME_INSERT( GU_WAR_FOG_UPDATE_RES );
	PACKETNAME_INSERT( GU_MOB_LUCKY_DROP_NFY );
	PACKETNAME_INSERT( GU_ITEM_UPGRADE_ALL_NFY );
	PACKETNAME_INSERT( GU_BOT_BOTCAUTION_NFY );// Bot 경고 [2/20/2008 SGpro]
	PACKETNAME_INSERT( GU_UPDATE_CHAR_REPUTATION );
	PACKETNAME_INSERT( GU_GUILD_FUNCTION_ADD_RES );
	PACKETNAME_INSERT( GU_GUILD_GIVE_ZENNY_RES );
	PACKETNAME_INSERT( GU_GUILD_BANK_START_RES );
	PACKETNAME_INSERT( GU_GUILD_BANK_MOVE_RES );
	PACKETNAME_INSERT( GU_GUILD_BANK_MOVE_STACK_RES );
	PACKETNAME_INSERT( GU_GUILD_BANK_END_RES );
	PACKETNAME_INSERT( GU_GUILD_BANK_ZENNY_INFO );
	PACKETNAME_INSERT( GU_GUILD_BANK_ITEM_INFO );
	PACKETNAME_INSERT( GU_GUILD_BANK_ZENNY_RES );
	PACKETNAME_INSERT( GU_GUILD_CREATE_MARK_RES );
	PACKETNAME_INSERT( GU_GUILD_CHANGE_MARK_RES );
	PACKETNAME_INSERT( GU_GUILD_MARK_CHANGED_NFY );
	PACKETNAME_INSERT( GU_CROSSFIRE_RES );
	PACKETNAME_INSERT( GU_BANK_LOAD_RES );
	PACKETNAME_INSERT( GU_GUILD_CHANGE_NAME_RES );
	PACKETNAME_INSERT( GU_PARTY_SHARETARGET_RES );						// [3/28/2008 SGpro]
	PACKETNAME_INSERT( GU_PARTY_SHARETARGET_NFY );						// [3/28/2008 SGpro]
	PACKETNAME_INSERT( GU_RIDE_ON_BUS_RES );
	PACKETNAME_INSERT( GU_RIDE_OFF_BUS_RES );
	PACKETNAME_INSERT( GU_TRANSFORM_CANCEL_RES );
	PACKETNAME_INSERT( GU_SHOP_ITEM_IDENTIFY_RES );
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_STATE_UPDATE_NFY );						// Match
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_TEAM_INFO_NFY );				// 예선 팀 정보
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_PLAYER_STATE_NFY );			//
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_UPDATE_SCORE_NFY );			// 예선 Score Update
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_TEAM_SCORE_NFY );				// 예선 팀 스코어 정보 ); 난입자를 위한 정보
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_SELECTION_NFY );				// 예선 동점 발생시 주사위 연출
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_STAGE_FINISH_NFY );			// 예선 stage finish 알림
	PACKETNAME_INSERT( GU_MATCH_MINORMATCH_MATCH_FINISH_NFY );
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_STATE_UPDATE_NFY );			//
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_TEAM_INFO_NFY );				// 본선 팀 정보
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_PLAYER_STATE_NFY );			//
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_UPDATE_SCORE_NFY );			// 본선 Score Update
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_STAGE_FINISH_NFY );			// 본선 stage finish 알림
	PACKETNAME_INSERT( GU_MATCH_MAJORMATCH_MATCH_FINISH_NFY );			// 본선 match finish 알림
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_STATE_UPDATE_NFY );			//
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_TEAM_INFO_NFY );				// 결선 팀 정보
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_PLAYER_STATE_NFY );			//
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_UPDATE_SCORE_NFY );			// 결선 Score Update
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_STAGE_FINISH_NFY );			// 결선 stage finish 알림
	PACKETNAME_INSERT( GU_MATCH_FINALMATCH_MATCH_FINISH_NFY );			// 결선 match finish 알림
	PACKETNAME_INSERT( GU_MATCH_AWARDING_NFY );							// 시상식 결과
	PACKETNAME_INSERT( GU_SKILL_CONFUSE_TARGET_NFY );					// Confuse 상태일 때의 공격 대상 알림
	PACKETNAME_INSERT( GU_SKILL_TERROR_COURSE_CHANGE_NFY );				// Terror 상태일 때 방향 전환 알림
	PACKETNAME_INSERT( GU_DICE_ROLL_RES );								// Action Skill 주사위 굴리기
	PACKETNAME_INSERT( GU_DICE_ROLLED_NFY );								// Action Skill 주사위 굴리기
	PACKETNAME_INSERT( GU_BUDOKAI_STATE_INFO_NFY );						// 천하제일무도회의 현재 상태를 전송
	PACKETNAME_INSERT( GU_BUDOKAI_UPDATE_STATE_NFY );					// 천하제일무도회 : main state update
	PACKETNAME_INSERT( GU_BUDOKAI_UPDATE_MATCH_STATE_NFY );				// 천하제일무도회 : match state update
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_INDIVIDUAL_RES );					// 개인 등록
	PACKETNAME_INSERT( GU_BUDOKAI_LEAVE_INDIVIDUAL_RES );				// 개인 취소
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_TEAM_INFO_RES );					// 팀 포인트
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_TEAM_RES );						// 팀 등록
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_TEAM_NFY );						// 팀 등록 알림
	PACKETNAME_INSERT( GU_BUDOKAI_LEAVE_TEAM_RES );						// 팀 등록 취소
	PACKETNAME_INSERT( GU_BUDOKAI_LEAVE_TEAM_NFY );						// 팀 등록 취소 알림
	PACKETNAME_INSERT( GU_BUDOKAI_LEAVE_TEAM_MEMBER_RES );				// 팀 멤버 취소
	PACKETNAME_INSERT( GU_BUDOKAI_LEAVE_TEAM_MEMBER_NFY );				// 팀 멤버 취소 알림
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_INFO_RES );						// 참가 정보
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_STATE_RES );						// 참가 상태
	PACKETNAME_INSERT( GU_BUDOKAI_JOIN_STATE_NFY );						// 참가 상태 알림
	PACKETNAME_INSERT( GU_BUDOKAI_MUDOSA_INFO_RES );						// 무도사 정보
	PACKETNAME_INSERT( GU_BUDOKAI_MUDOSA_TELEPORT_RES );					// 무도사 텔레포트
	PACKETNAME_INSERT( GU_BUDOKAI_PROGRESS_MESSAGE_NFY );				// 경기 진행 정보 알림(공지)
	PACKETNAME_INSERT( GU_BUDOKAI_SOCIAL_ACTION_NFY );
	PACKETNAME_INSERT( GU_BUDOKAI_GM_BUDOKAI_SERVER_ENTER_RES );			// 천하제일무도회 서버로 텔레포트 요청
	PACKETNAME_INSERT( GU_BUDOKAI_GM_BUDOKAI_SERVER_LEAVE_RES );			// 천하제일무도회 서버에서 원래 서버로 이동
	PACKETNAME_INSERT( GU_BUDOKAI_GM_MATCH_PROGRESS_INFO_RES );			// 현재 경기 진행 상황 리스트
	PACKETNAME_INSERT( GU_BUDOKAI_GM_MATCH_ARENA_ENTER_RES );			// 경기장 들어가기
	PACKETNAME_INSERT( GU_BUDOKAI_GM_MATCH_ARENA_LEAVE_RES );			// 경기장 나가기
	PACKETNAME_INSERT( GU_DISCONNECTED_NFY );
	PACKETNAME_INSERT( GU_BOT_BOTCAUTION_HELPME_NFY );					// Help Me 경고 [5/27/2008 SGpro]
	PACKETNAME_INSERT( GU_SCOUTER_TURN_ON_NFY );	
	PACKETNAME_INSERT( GU_SCOUTER_TURN_OFF_NFY );
	PACKETNAME_INSERT( GU_SCOUTER_BROKEN_NFY );
	PACKETNAME_INSERT( GU_SCOUTER_ITEM_SELL_RES );
	PACKETNAME_INSERT( GU_SHOP_EVENTITEM_START_RES );					// [7/15/2008 SGpro]
	PACKETNAME_INSERT( GU_SHOP_EVENTITEM_BUY_RES );						// EVENT ITEM 구매 [7/11/2008 SGpro]
	PACKETNAME_INSERT( GU_SHOP_EVENTITEM_END_RES );						// [7/15/2008 SGpro]
	PACKETNAME_INSERT( GU_ITEM_REPLACE );								// ITEM 교체 [7/11/2008 SGpro]
	PACKETNAME_INSERT( GU_SHOP_GAMBLE_BUY_RES );						// EVENT ITEM 구매 [7/11/2008 SGpro]
	PACKETNAME_INSERT( GU_PARTY_DUNGEON_DIFF_NFY );
	PACKETNAME_INSERT( GU_PARTY_DUNGEON_DIFF_RES );
	PACKETNAME_INSERT( GU_PARTY_DUNGEON_INIT_NFY );
	PACKETNAME_INSERT( GU_PARTY_DUNGEON_INIT_RES );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_SP );
	PACKETNAME_INSERT( GU_SKILL_INIT_RES );
	PACKETNAME_INSERT( GU_SKILL_REMOVE_NFY );
	PACKETNAME_INSERT( GU_HTB_REMOVE_NFY );
	PACKETNAME_INSERT( GU_TELEPORT_PROPOSAL_NFY );
	PACKETNAME_INSERT( GU_TELEPORT_CONFIRM_RES );
	PACKETNAME_INSERT( GU_AVATAR_PETITION_INFO );
	PACKETNAME_INSERT( GU_GAME_COMMON_MSG_NFY );
	PACKETNAME_INSERT( GU_HOIPOIMIX_RECIPE_REG_NFY );					// 레시피등록
	PACKETNAME_INSERT( GU_HOIPOIMIX_ITEM_RECIPE_INFO );
	PACKETNAME_INSERT( GU_DYNAMIC_OBJECT_UPDATE_STATE );
	PACKETNAME_INSERT( GU_HOIPOIMIX_ITEM_MAKE_EXP_NFY );					// 호이포이 믹스 레벨업이나 경험치 업데이트
	PACKETNAME_INSERT( GU_CHAR_TARGET_LOST_NFY );
	PACKETNAME_INSERT( GU_CHAR_GUARD_CRASHED_NFY );		// Guard가 Skill ability에 의해 강제로 해제됨
	PACKETNAME_INSERT( GU_UPDATE_CHAR_RP_BALL );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_RP_BALL_MAX );
	PACKETNAME_INSERT( GU_AVATAR_RP_INCREASE_START_NFY );
	PACKETNAME_INSERT( GU_AVATAR_RP_DECREASE_START_NFY );
	PACKETNAME_INSERT( GU_AVATAR_RP_INCREASE_STOP_NFY );
	PACKETNAME_INSERT( GU_HTB_LAST_STEP_CHANGED_NFY );
	PACKETNAME_INSERT( GU_CHAR_CHARGE_CANCELED_NFY );
	PACKETNAME_INSERT( GU_CHAR_REFRESH_LP_EP );
	PACKETNAME_INSERT( GU_CHAR_NONBATTLEACTIONPATTERNSET_UNITIDX_NFY );
	PACKETNAME_INSERT( GU_VEHICLE_START_NFY );			// 탈 것 시작 위치 알림
	PACKETNAME_INSERT( GU_VEHICLE_END_RES );						// 탈 것 사용 종료 알림
	PACKETNAME_INSERT( GU_VEHICLE_END_NFY );
	PACKETNAME_INSERT( GU_VEHICLE_STUNT_NFY );					// 스페이스바 누름(탈것)
	PACKETNAME_INSERT( GU_SKILL_PASSIVE_EFFECT_APPLIED_NFY );
	PACKETNAME_INSERT( GU_AVATAR_UPDATED_SKILL_DATA_INFO );
	PACKETNAME_INSERT( GU_MONSTER_TRANSFORMED_NFY );
	PACKETNAME_INSERT( GU_DOJO_CREATE_RES );
	PACKETNAME_INSERT( GU_DOJO_DELETE_RES );
	PACKETNAME_INSERT( GU_DOJO_FUNCTION_ADD_RES );
	PACKETNAME_INSERT( GU_DOGI_CREATE_RES );								// 도복생성
	PACKETNAME_INSERT( GU_DOGI_CHANGE_RES );								// 도복변경
	PACKETNAME_INSERT( GU_DOGI_UPDATE_NFY );								// 도복변경알림
	PACKETNAME_INSERT( GU_GUILD_DOGI_CREATE_RES );
	PACKETNAME_INSERT( GU_GUILD_DOGI_CHANGE_RES );
	PACKETNAME_INSERT( GU_CHILD_ADULT_SWITCHED_NFY );
	PACKETNAME_INSERT( GU_CHANGE_CLASS_AUTHORITY_CHANGED_NFY );
	PACKETNAME_INSERT( GU_PLAY_BGM );
	PACKETNAME_INSERT( GU_DOJO_MARK_CHANGED_NFY );
	PACKETNAME_INSERT( GU_DOJO_LEVEL_CHANGED_NFY );
	PACKETNAME_INSERT( GU_UPDATE_CHAR_NETP );
	PACKETNAME_INSERT( GU_DOJO_SCRAMBLE_RES );							// 도장쟁탈전 신청에 대한 응답
	PACKETNAME_INSERT( GU_DOJO_SCRAMBLE_RESPONSE_RES );					// 도장쟁탈전 신청응답 처리에 대한 응답
	PACKETNAME_INSERT( GU_NETMARBLEMEMBERIP_NFY );
	PACKETNAME_INSERT( GU_BUS_LOCATION_NFY );
	PACKETNAME_INSERT( GU_BUS_LOCATION_ERASED_NFY );
	PACKETNAME_INSERT( GU_BUS_LOCATION_RESET_ALL_NFY );
	PACKETNAME_INSERT( GU_ITEM_EXPIRED_NFY );
	PACKETNAME_INSERT( GU_SHOP_NETPYITEM_START_RES );
	PACKETNAME_INSERT( GU_SHOP_NETPYITEM_BUY_RES );
	PACKETNAME_INSERT( GU_SHOP_NETPYITEM_END_RES );
	PACKETNAME_INSERT( GU_DURATION_ITEM_BUY_RES );
	PACKETNAME_INSERT( GU_DURATION_RENEW_RES );
	PACKETNAME_INSERT( GU_CHAR_REFRESH_BATTLE_ATTRIBUTE_MODIFIER );
	PACKETNAME_INSERT( GU_CHAR_RANKPOINT_RESET_NFY );
	PACKETNAME_INSERT( GU_DOJO_NPC_INFO_RES );
	PACKETNAME_INSERT( GU_GAMEGUARD_AUTH_ANSWER_REQ );
	PACKETNAME_INSERT( GU_DOJO_SEAL_ATTACK_BEGIN_NFY );
	PACKETNAME_INSERT( GU_DOJO_SEAL_ATTACK_END_NFY );
	PACKETNAME_INSERT( GU_DOJO_SEAL_CURRENT_STATE_NFY );
	PACKETNAME_INSERT( GU_INVENTORY_CAPSULE_UNLOCK_NFY );
	PACKETNAME_INSERT( GU_DOJO_SCRAMBLE_SHIFT_SEAL_STATE_NFY );

	PACKETNAME_INSERT( TU_ENTER_CHAT_RES );
	PACKETNAME_INSERT( TU_DISCONNECT );
	PACKETNAME_INSERT( TU_DISCONNECTED_NFY );
	PACKETNAME_INSERT( TU_HEARTBEAT );
	PACKETNAME_INSERT( TU_SYSTEM_DISPLAY_TEXT );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_SAY );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_SHOUT );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_WHISPER );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_WHISPER_FAILED_NFY );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_PARTY );
	PACKETNAME_INSERT( TU_CHAT_MESSAGE_GUILD );
	// Guild Creation/Disbanding
	PACKETNAME_INSERT( TU_GUILD_CREATED_NFY );						// 길드가 생성되었음을 공지
	PACKETNAME_INSERT( TU_GUILD_INFO );								// 길드 정보
	PACKETNAME_INSERT( TU_GUILD_MEMBER_INFO );						// 길드 멤버 정보
	// Guild Member Invitation/Leaving/Kicking Out
	PACKETNAME_INSERT( TU_GUILD_DISBAND_RES );						// 길드 해체 요청 결과
	PACKETNAME_INSERT( TU_GUILD_BEING_DISBANDED_NFY );				// 길드 해체 대기 상태 공지
	PACKETNAME_INSERT( TU_GUILD_DISBAND_CANCEL_RES );				// 길드 해체 취소 요청 결과
	PACKETNAME_INSERT( TU_GUILD_DISBAND_CANCELED_NFY );				// 길드 해체가 취소되었음을 공지
	PACKETNAME_INSERT( TU_GUILD_DISBANDED_NFY );						// 실제 길드가 해체되었음을 공지
	PACKETNAME_INSERT( TU_GUILD_INVITED_NFY );						// 길드에 초대받았음을 알림
	PACKETNAME_INSERT( TU_GUILD_RESPONSE_INVITATION_RES );			// 길드 초대에 대한 대답 결과
	PACKETNAME_INSERT( TU_GUILD_MEMBER_JOINED_NFY );					// 새 길드원 가입 공지
	PACKETNAME_INSERT( TU_GUILD_INVITATION_DECLINED_NFY );			// 길드 초대를 거절
	PACKETNAME_INSERT( TU_GUILD_INVITATION_EXPIRED_NFY );			// 길드 초대의 유효 시간 경과
	PACKETNAME_INSERT( TU_GUILD_LEAVE_RES );							// 길드 탈퇴 요청 결과
	PACKETNAME_INSERT( TU_GUILD_MEMBER_LEFT_NFY );					// 길드원 탈퇴 공지
	PACKETNAME_INSERT( TU_GUILD_KICK_OUT_RES );						// 길드원의 강제 탈퇴 요청 결과
	PACKETNAME_INSERT( TU_GUILD_MEMBER_KICKED_OUT_NFY );				// 길드원 강제 탈퇴 공지
	// Appointment of Guild Master/Guild Second Master
	PACKETNAME_INSERT( TU_GUILD_APPOINT_SECOND_MASTER_RES );			// Second Master의 임명 결과
	PACKETNAME_INSERT( TU_GUILD_SECOND_MASTER_APPOINTED_NFY );		// Second Master의 임명 공지
	PACKETNAME_INSERT( TU_GUILD_DISMISS_SECOND_MASTER_RES );			// Second Master의 직위 해제 결과
	PACKETNAME_INSERT( TU_GUILD_SECOND_MASTER_DISMISSED_NFY );		// Second Master의 직위 해제 공지
	PACKETNAME_INSERT( TU_GUILD_CHANGE_GUILD_MASTER_RES );			// Guild Master의 이양 결과
	PACKETNAME_INSERT( TU_GUILD_GUILD_MASTER_CHANGED_NFY );			// Guild Master의 변경 공지
	// Sync. of Guild Members' Info
	PACKETNAME_INSERT( TU_GUILD_MEMBER_POSITION_CHANGED_NFY );		// 길드원 위치 변경 알림
	PACKETNAME_INSERT( TU_GUILD_MEMBER_CLASS_CHANGED_NFY );			// 길드원 직업 변경 알림
	PACKETNAME_INSERT( TU_GUILD_MEMBER_LEVEL_CHANGED_NFY );			// 길드원 레벨 변경 알림
	PACKETNAME_INSERT( TU_GUILD_MEMBER_REPUTATION_CHANGED_NFY );		// 길드원 평판 변경 알림
	PACKETNAME_INSERT( TU_GUILD_MEMBER_ONLINE_NFY );					// 길드원 게임 입장 알림
	PACKETNAME_INSERT( TU_GUILD_MEMBER_OFFLINE_NFY );				// 길드원 게임 퇴장 알림
	PACKETNAME_INSERT( TU_FRIEND_ADD_RES );		// 친구 추가
	PACKETNAME_INSERT( TU_FRIEND_DEL_RES );		// 친구 삭제
	PACKETNAME_INSERT( TU_FRIEND_MOVE_RES );		// 친구 -> 블랙리스트로 이동
	PACKETNAME_INSERT( TU_FRIEND_LIST_INFO );	// 친구 리스트 정보
	PACKETNAME_INSERT( TU_FRIEND_BLACK_ADD_RES );		// 친구 블랙 리스트 추가
	PACKETNAME_INSERT( TU_FRIEND_BLACK_DEL_RES );		// 친구 블랙 리스트 삭제
	PACKETNAME_INSERT( TU_FRIEND_INFO );					// 온라인 친구 상세 정보
	PACKETNAME_INSERT( TU_FRIEND_INFO_CHANGE );			// 친구 상태변경 알림
	PACKETNAME_INSERT( TU_RANKBATTLE_RANK_LIST_RES );
	PACKETNAME_INSERT( TU_RANKBATTLE_RANK_FIND_CHARACTER_RES );
	PACKETNAME_INSERT( TU_RANKBATTLE_RANK_COMPARE_DAY_RES );	
	PACKETNAME_INSERT( TU_GUILD_REPUTATION_CHANGE_NFY );					// 길드명성 변경 알림
	PACKETNAME_INSERT( TU_GUILD_FUNCTION_CHANGE_NFY );
	PACKETNAME_INSERT( TU_GUILD_CHANGE_NOTICE_NFY );
	PACKETNAME_INSERT( TU_GUILD_CHANGE_NOTICE_RES );
	PACKETNAME_INSERT( TU_GUILD_GIVE_ZENNY_NFY );
	PACKETNAME_INSERT( TU_TMQ_RECORD_LIST_RES );
	PACKETNAME_INSERT( TU_TMQ_MEMBER_LIST_RES );
	PACKETNAME_INSERT( TU_BUDOKAI_NOTICE_NFY );						// 천하제일무도회 공지
	PACKETNAME_INSERT( TU_BUDOKAI_TOURNAMENT_INDIVIDUAL_LIST_RES );
	PACKETNAME_INSERT( TU_BUDOKAI_TOURNAMENT_INDIVIDUAL_INFO_RES );
	PACKETNAME_INSERT( TU_BUDOKAI_TOURNAMENT_TEAM_LIST_RES );
	PACKETNAME_INSERT( TU_BUDOKAI_TOURNAMENT_TEAM_INFO_RES );
	PACKETNAME_INSERT( TU_PETITION_CHAT_START_REQ );						// 진정 채팅 요청 [ by sooshia 2008-10-15 ]
	PACKETNAME_INSERT( TU_PETITION_CHAT_GM_SAY_REQ );				// GM이 말한 내용 [ by sooshia 2008-10-16 ]
	PACKETNAME_INSERT( TU_PETITION_CHAT_USER_SAY_RES );				// [ by sooshia 2008-10-16 ]
	PACKETNAME_INSERT( TU_PETITION_CHAT_GM_END_NFY );					// [ by sooshia 2008-10-17 ]
	PACKETNAME_INSERT( TU_PETITION_USER_INSERT_RES );					// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( TU_PETITION_CONTENT_MODIFY_RES );					// [ by sooshia 2008-10-18 ]

	PACKETNAME_INSERT( TU_PETITION_USER_CANCEL_RES );					// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( TU_PETITION_FINISH_NFY );
	PACKETNAME_INSERT( TU_DOJO_CREATED_NFY );
	PACKETNAME_INSERT( TU_DOJO_DESTROYED_NFY );
	PACKETNAME_INSERT( TU_DOJO_BRIEF_NFY );
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_NFY );							// 길드리더가 밖에 나갔다 왔거나 응답이 필요한 상태 일때 다시 알려준다.
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_INFORM_NFY );					// 도장전 방송 메세지
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_REJECT_NFY );					// 신청했던 유파에게 거절하였을때
	PACKETNAME_INSERT( TU_DOJO_BUDOKAI_SEED_ADD_RES );
	PACKETNAME_INSERT( TU_DOJO_BUDOKAI_SEED_DEL_RES );
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_POINT_NFY );						// 도장 점수 방송 메세지
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_SHIEFT_SEAL_STATE_NFY );			// 도장 인장 획득 방송
	PACKETNAME_INSERT( TU_DOJO_NOTICE_CHANGE_RES );
	PACKETNAME_INSERT( TU_DOJO_NOTICE_CHANGE_NFY );
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_RECEIVE_NFY );					// 신청했던 유파에게 승락되었을때
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_RECEIVE_INFO_NFY );
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_REWARD_NFY );
	PACKETNAME_INSERT( TU_DOJO_SCRAMBLE_RESULT_NFY );

	PACKETNAME_INSERT( UA_LOGIN_REQ );
	PACKETNAME_INSERT( UA_LOGIN_DISCONNECT_REQ );

	PACKETNAME_INSERT( UC_LOGIN_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_SERVERLIST_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_SERVERLIST_ONE_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_ADD_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_DEL_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_SELECT_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_EXIT_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_LOAD_REQ );
	PACKETNAME_INSERT( UC_CHARACTER_DEL_CANCEL_REQ );					// 이름이 중복 되어 변경
	PACKETNAME_INSERT( UC_CONNECT_WAIT_CHECK_REQ );
	PACKETNAME_INSERT( UC_CONNECT_WAIT_CANCEL_REQ );						// 대기 취소
	PACKETNAME_INSERT( UC_CHARACTER_RENAME_REQ );

	PACKETNAME_INSERT( UG_PING );
	PACKETNAME_INSERT( UG_GAME_ENTER_REQ );
	PACKETNAME_INSERT( UG_GAME_LEAVE_REQ );									// 게임 나감
	PACKETNAME_INSERT( UG_AUTH_KEY_FOR_COMMUNITY_SERVER_REQ );				// 커뮤니티 서버 인증키 요청
	PACKETNAME_INSERT( UG_ENTER_WORLD );										// 월드 진입
	PACKETNAME_INSERT( UG_SERVER_COMMAND );									// 서버 명령어
	PACKETNAME_INSERT( UG_CHAR_READY_FOR_COMMUNITY_SERVER_NFY );				// 커뮤니티 서버와의 데이타 전송 준비가 되었음을 알림
	PACKETNAME_INSERT( UG_CHAR_READY_TO_SPAWN );								// 로딩 완료(Spawning state로의 진입 준비 상태)
	PACKETNAME_INSERT( UG_CHAR_READY );										// 캐릭터 준비
	PACKETNAME_INSERT( UG_CHAR_MOVE );										// 캐릭터 이동
	PACKETNAME_INSERT( UG_CHAR_DEST_MOVE );									// 캐릭터 목적지 이동
	PACKETNAME_INSERT( UG_CHAR_CHANGE_HEADING );								// 캐릭터 회전
	PACKETNAME_INSERT( UG_CHAR_CHANGE_DIRECTION_ON_FLOATING );				// 캐릭터 점프/falling 때의 바라보는 방향
	PACKETNAME_INSERT( UG_CHAR_FOLLOW_MOVE );								// 캐릭터 타겟 따라가기
	PACKETNAME_INSERT( UG_CHAR_DASH_KEYBOARD );								// Keyboard dash 시작
	PACKETNAME_INSERT( UG_CHAR_DASH_MOUSE );									// Mouse dash 시작
	PACKETNAME_INSERT( UG_CHAR_JUMP );										// 점프 시작
	PACKETNAME_INSERT( UG_CHAR_JUMP_END );									// 점프 종료
	PACKETNAME_INSERT( UG_CHAR_FALLING );									// Falling 상태 시작/종료
	PACKETNAME_INSERT( UG_CHAR_TOGG_SITDOWN );								// 앉기모드 토글
	PACKETNAME_INSERT( UG_CHAR_TOGG_FIGHTING );								// 전투모드 토글
	PACKETNAME_INSERT( UG_CHAR_TARGET_SELECT );								// 타겟 선택
	PACKETNAME_INSERT( UG_CHAR_TARGET_INFO );								// 타겟 정보 요청
	PACKETNAME_INSERT( UG_CHAR_TARGET_FACING );								// 타겟 대면
	PACKETNAME_INSERT( UG_CHAR_ATTACK_BEGIN );								// 공격 시작 알림
	PACKETNAME_INSERT( UG_CHAR_ATTACK_END );									// 공격 종료 알림
	PACKETNAME_INSERT( UG_CHAR_CHARGE );										// 캐릭터 기충전
	PACKETNAME_INSERT( UG_CHAR_BLOCK_MODE );									// Block 모드 시작/종료
	PACKETNAME_INSERT( UG_CHAR_TELEPORT_REQ );								// 텔레포트 요청
	PACKETNAME_INSERT( UG_CHAR_BIND_REQ );									// 바인드 요청
	PACKETNAME_INSERT( UG_CHAR_REVIVAL_REQ );								// 부활 요청
	PACKETNAME_INSERT( UG_CHAR_SERVER_CHANGE_REQ );							// 다른 게임 서버로의 이동 요청
	PACKETNAME_INSERT( UG_CHAR_CHANNEL_CHANGE_REQ );							// 캐릭터 나감 -> 다른 서버 채널로 이동 요청
	PACKETNAME_INSERT( UG_CHAR_EXIT_REQ );									// 캐릭터 나감 -> 캐릭터 서버로 이동 요청
	PACKETNAME_INSERT( UG_GAME_EXIT_REQ );									// 게임을 종료함
	PACKETNAME_INSERT( UG_CHAR_AWAY_REQ );
	PACKETNAME_INSERT( UG_CHAR_KEY_UPDATE_REQ );
	PACKETNAME_INSERT( UG_CHAR_DIRECT_PLAY_ACK );							// 연출 종료후 보내주는 응답
	PACKETNAME_INSERT( UG_CHAR_KNOCKDOWN_RELEASE_NFY );						// 넉다운 풀기
	PACKETNAME_INSERT( UG_CHAR_SKILL_REQ );									// 스킬 사용 요청
	PACKETNAME_INSERT( UG_SKILL_TARGET_LIST );								// 스킬 타겟 목록 알림
	PACKETNAME_INSERT( UG_SKILL_LEARN_REQ );									// 스킬 수련 요청
	PACKETNAME_INSERT( UG_SKILL_UPGRADE_REQ );								// 스킬 향상 요청
	PACKETNAME_INSERT( UG_SKILL_RP_BONUS_SETTING_REQ );						// 스킬마다 자동으로 사용될 RP 보너스 타입 설정
	PACKETNAME_INSERT( UG_HTB_START_REQ );								    // HTB 시작 요청
	PACKETNAME_INSERT( UG_HTB_LEARN_REQ );									// HTB 습득 요청
	PACKETNAME_INSERT( UG_HTB_FORWARD_REQ );									// HTB 진행
	PACKETNAME_INSERT( UG_HTB_RP_BALL_USE_REQ );
	PACKETNAME_INSERT( UG_BUFF_DROP_REQ );									// Buff 해제 요청
	PACKETNAME_INSERT( UG_ITEM_MOVE_REQ );									// 아이템 이동 요청
	PACKETNAME_INSERT( UG_ITEM_MOVE_STACK_REQ );								// 아이템 스택 이동 요청
	PACKETNAME_INSERT( UG_ITEM_DELETE_REQ );									// 아이템 삭제 요청
	PACKETNAME_INSERT( UG_ITEM_EQUIP_REPAIR_REQ );							// 수리 시작 요청
	PACKETNAME_INSERT( UG_ITEM_PICK_REQ );									// 아이템줍기 요청
	PACKETNAME_INSERT( UG_ITEM_REPAIR_REQ );
	PACKETNAME_INSERT( UG_ITEM_USE_REQ );									// 아이템 사용 요청
	PACKETNAME_INSERT( UG_ITEM_UPGRADE_REQ );								// 아이템 업그레이드
	PACKETNAME_INSERT( UG_ITEM_IDENTIFY_REQ );								// 스카우터파츠로 아이템 확인
	PACKETNAME_INSERT( UG_ZENNY_PICK_REQ );									// 돈줍기 요청
	PACKETNAME_INSERT( UG_SHOP_START_REQ );									// 상점 열기
	PACKETNAME_INSERT( UG_SHOP_BUY_REQ );									// 상점 물건 사기
	PACKETNAME_INSERT( UG_SHOP_SELL_REQ );									// 상점 물건 팔기
	PACKETNAME_INSERT( UG_SHOP_END_REQ );									// 상점 닫기
	PACKETNAME_INSERT( UG_PARTY_CREATE_REQ );								// 파티 만들기
	PACKETNAME_INSERT( UG_PARTY_DISBAND_REQ );								// 파티 해산하기
	PACKETNAME_INSERT( UG_PARTY_INVITE_REQ );								// 파티에 초대하기
	PACKETNAME_INSERT( UG_PARTY_INVITE_CHARID_REQ );							// 파티에 초대하기(상대방의 CharID 이용)
	PACKETNAME_INSERT( UG_PARTY_INVITE_CHAR_NAME_REQ );						// 파티에 초대하기(상대방의 이름 이용)
	PACKETNAME_INSERT( UG_PARTY_RESPONSE_INVITATION );						// 파티 초대에 대한 대답 보내기
	PACKETNAME_INSERT( UG_PARTY_LEAVE_REQ );									// 파티 탈퇴하기
	PACKETNAME_INSERT( UG_PARTY_KICK_OUT_REQ );								// 멤버 강제로 탈퇴시키기
	PACKETNAME_INSERT( UG_PARTY_CHANGE_LEADER_REQ );							// 파티 리더 변경하기
	PACKETNAME_INSERT( UG_PARTY_CHANGE_ZENNY_LOOTING_METHOD_REQ );			// 제니 분배 방법 변경하기
	PACKETNAME_INSERT( UG_PARTY_CHANGE_ITEM_LOOTING_METHOD_REQ );			// 아이템 분배 방법 변경하기
	PACKETNAME_INSERT( UG_BANK_START_REQ );									// Warehouse 아이템 로딩
	PACKETNAME_INSERT( UG_BANK_MOVE_REQ );									// Warehouse 의 아이템 이동
	PACKETNAME_INSERT( UG_BANK_MOVE_STACK_REQ );								// Warehouse 의 스택아이템 이동
	PACKETNAME_INSERT( UG_BANK_END_REQ );									// Warehouse 를 닫는다.
	PACKETNAME_INSERT( UG_BANK_ZENNY_REQ );									// Warehouse 에 저금 혹은 인출한다.
	PACKETNAME_INSERT( UG_BANK_BUY_REQ );									// Warehouse 의 창고가방을 늘린다.
	PACKETNAME_INSERT( UG_BANK_ITEM_DELETE_REQ );							// Warehouse 의 아이템을 삭제한다.
	PACKETNAME_INSERT( UG_SCOUTER_INDICATOR_REQ );							// 스카우터 전투력측정	
	PACKETNAME_INSERT( UG_SCOUTER_PREDICT_REQ );								// 스카우터 업그레이드 예측	
	PACKETNAME_INSERT( UG_SCOUTER_EQUIP_CHECK_REQ );							// 스카우터 상대 장착아이템 확인
	PACKETNAME_INSERT( UG_SCOUTER_CHIP_REMOVE_ALL_REQ );						// 스카우터 칩을 모두 제거
	PACKETNAME_INSERT( UG_SOCIAL_ACTION );									// Social Action 사용
	PACKETNAME_INSERT( UG_TS_CONFIRM_STEP_REQ );								// 트리거 진행 요청
	PACKETNAME_INSERT( UG_TS_UPDATE_STATE );									// 트리거 실패 상태 업데이트
	PACKETNAME_INSERT( UG_TS_EXCUTE_TRIGGER_OBJECT );						// Excute Trigger Object
	PACKETNAME_INSERT( UG_QUEST_ITEM_MOVE_REQ );								// 퀘스트 아이템 이동 요청
	PACKETNAME_INSERT( UG_QUEST_ITEM_DELETE_REQ );							// 퀘스트 아이템 삭제 요청
	PACKETNAME_INSERT( UG_QUEST_GIVEUP_REQ );								// 퀘스트 아이템 포기 요청
	PACKETNAME_INSERT( UG_QUEST_SHARE );										// 퀘스트 공유 요청
	PACKETNAME_INSERT( UG_QUEST_OBJECT_VISIT_REQ );							// npc ); tobject 방문 이벤트
	PACKETNAME_INSERT( UG_FREEBATTLE_CHALLENGE_REQ );						// 프리배틀 대전 신청
	PACKETNAME_INSERT( UG_FREEBATTLE_ACCEPT_RES );							// 프리배틀 대전 수락응답
	PACKETNAME_INSERT( UG_QUICK_SLOT_UPDATE_REQ );							// 빠른슬롯 추가 하거나 수정
	PACKETNAME_INSERT( UG_QUICK_SLOT_DEL_REQ );								// 빠른슬롯 삭제
	PACKETNAME_INSERT( UG_PET_DISMISS_PET_REQ );								// 펫의 소환 취소 요청
	PACKETNAME_INSERT( UG_TRADE_START_REQ );									// 해당 유저와의 교환 요청
	PACKETNAME_INSERT( UG_TRADE_OK_RES );									// 해당 유져의 응답
	PACKETNAME_INSERT( UG_TRADE_ADD_REQ );                                   // 교환창에 아이템 등록 
	PACKETNAME_INSERT( UG_TRADE_DEL_REQ );									// 교환창에 아이템 삭제
	PACKETNAME_INSERT( UG_TRADE_MODIFY_REQ );                                   // 교환창에 등록된 아이템 개수 변경 
	PACKETNAME_INSERT( UG_TRADE_ZENNY_UPDATE_REQ );							// 교환창에 제니 등록 및 변경
	PACKETNAME_INSERT( UG_TRADE_END_REQ );									// 교환 완료 버튼 클릭
	PACKETNAME_INSERT( UG_TRADE_CANCEL_REQ );								// 교환 취소 혹은 캐릭종료 거리 이탈시 사용
	PACKETNAME_INSERT( UG_TRADE_DENY_REQ );									// 교환이 불가능 하게 하거나 가능하도록 한다.
	PACKETNAME_INSERT( UG_GUILD_CREATE_REQ );								// 길드 만들기 ( Guild Creation/Disbanding )
	PACKETNAME_INSERT( UG_GUILD_INVITE_REQ );								// 길드에 초대하기 ( Guild Member Invitation/Leaving/Kicking Out )
	PACKETNAME_INSERT( UG_TUTORIAL_HINT_UPDATE_REQ );						// 힌트 진행 상황을 업데이트한다.
	PACKETNAME_INSERT( UG_TUTORIAL_WAIT_CANCEL_REQ );						// 튜토리얼 대기 취소하기
	PACKETNAME_INSERT( UG_TUTORIAL_PLAY_QUIT_REQ );							// 튜토리얼 플레이 취소하기

	PACKETNAME_INSERT( UG_RANKBATTLE_INFO_REQ );
	PACKETNAME_INSERT( UG_RANKBATTLE_JOIN_REQ );
	PACKETNAME_INSERT( UG_RANKBATTLE_LEAVE_REQ );
	PACKETNAME_INSERT( UG_DRAGONBALL_CHECK_REQ );							// 드래곤볼 UI 7개 배치OK
	PACKETNAME_INSERT( UG_DRAGONBALL_REWARD_REQ );							// 드래곤볼 다 모음에 대한 보상 선택 요청
	PACKETNAME_INSERT( UG_PRIVATESHOP_CREATE_REQ );							// 상점을 만들어라 요청[6/28/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_EXIT_REQ );							// 상점을 완전히 닫아라 요청[6/28/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_OPEN_REQ );							// 상점 상태를 Open으로 해라 요청[6/28/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_CLOSE_REQ );							// 상점 상태를 Close로 해라 요청[6/28/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_UPDATE_REQ );						// 상점 아이템에 내용을 변경 요청[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_INSERT_REQ );						// 상점 아이템 추가 요청[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_GET_REQ );						// 상점 아이템 정보 요청
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_DELETE_REQ );						// 상점 아이템 삭제 요청[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_BUYING_REQ );						// 상점 아이템 사기 요청[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ENTER_REQ );							// 손님 입장[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_LEAVE_REQ );							// 손님 퇴장[6/29/2007 SGpro]
	PACKETNAME_INSERT( UG_PRIVATESHOP_ITEM_SELECT_REQ );						// 아이템 찜[7/19/2007 SGpro]

	PACKETNAME_INSERT( UG_MAIL_START_REQ );
	PACKETNAME_INSERT( UG_MAIL_SEND_REQ );
	PACKETNAME_INSERT( UG_MAIL_READ_REQ );
	PACKETNAME_INSERT( UG_MAIL_DEL_REQ );
	PACKETNAME_INSERT( UG_MAIL_RETURN_REQ );
	PACKETNAME_INSERT( UG_MAIL_RELOAD_REQ );
	PACKETNAME_INSERT( UG_MAIL_LOAD_REQ );
	PACKETNAME_INSERT( UG_MAIL_ITEM_RECEIVE_REQ );
	PACKETNAME_INSERT( UG_MAIL_LOCK_REQ );
	PACKETNAME_INSERT( UG_MAIL_MULTI_DEL_REQ );

	PACKETNAME_INSERT( UG_PORTAL_ADD_REQ );
	PACKETNAME_INSERT( UG_PORTAL_REQ );
	PACKETNAME_INSERT( UG_WAR_FOG_UPDATE_REQ );	
	PACKETNAME_INSERT( UG_GUILD_FUNCTION_ADD_REQ );
	PACKETNAME_INSERT( UG_GUILD_GIVE_ZENNY );
	PACKETNAME_INSERT( UG_GUILD_BANK_START_REQ );							// GUILD Warehouse 아이템 로딩
	PACKETNAME_INSERT( UG_GUILD_BANK_MOVE_REQ );								// GUILD Warehouse 의 아이템 이동
	PACKETNAME_INSERT( UG_GUILD_BANK_MOVE_STACK_REQ );						// GUILD Warehouse 의 스택아이템 이동
	PACKETNAME_INSERT( UG_GUILD_BANK_END_REQ );								// GUILD Warehouse 를 닫는다.
	PACKETNAME_INSERT( UG_GUILD_BANK_ZENNY_REQ );							// GUILD Warehouse 에 저금 혹은 인출한다.
	PACKETNAME_INSERT( UG_GUILD_CREATE_MARK_REQ );							// GuildMark Create
	PACKETNAME_INSERT( UG_GUILD_CHANGE_MARK_REQ );							// GuildMark Change
	PACKETNAME_INSERT( UG_CROSSFIRE_REQ );
	PACKETNAME_INSERT( UG_BANK_LOAD_REQ );
	PACKETNAME_INSERT( UG_GUILD_CHANGE_NAME_REQ );			
	PACKETNAME_INSERT( UG_PARTY_SHARETARGET_REQ );							// [3/28/2008 SGpro]
	PACKETNAME_INSERT( UG_RIDE_ON_BUS_REQ );
	PACKETNAME_INSERT( UG_RIDE_OFF_BUS_REQ );
	PACKETNAME_INSERT( UG_TRANSFORM_CANCEL_REQ );							// 변신 취소 요청
	PACKETNAME_INSERT( UG_SHOP_ITEM_IDENTIFY_REQ );
	PACKETNAME_INSERT( UG_DICE_ROLL_REQ );									// Action Skill 주사위 굴리기
	PACKETNAME_INSERT( UG_BUDOKAI_JOIN_INDIVIDUAL_REQ );						// 개인 등록
	PACKETNAME_INSERT( UG_BUDOKAI_LEAVE_INDIVIDUAL_REQ );					// 개인 취소
	PACKETNAME_INSERT( UG_BUDOKAI_JOIN_TEAM_INFO_REQ );						//
	PACKETNAME_INSERT( UG_BUDOKAI_JOIN_TEAM_REQ );							// 팀 등록
	PACKETNAME_INSERT( UG_BUDOKAI_LEAVE_TEAM_REQ );							// 팀 취소
	PACKETNAME_INSERT( UG_BUDOKAI_LEAVE_TEAM_MEMBER_REQ );					// 팀 멤버 취소

	PACKETNAME_INSERT( UG_BUDOKAI_JOIN_INFO_REQ );							// 참가 정보 요청
	PACKETNAME_INSERT( UG_BUDOKAI_JOIN_STATE_REQ );							// 참가 상태 요청
	PACKETNAME_INSERT( UG_BUDOKAI_MUDOSA_INFO_REQ );							// 무도사 정보 요청
	PACKETNAME_INSERT( UG_BUDOKAI_MUDOSA_TELEPORT_REQ );						// 무도사로 텔레포트 요청
	PACKETNAME_INSERT( UG_BUDOKAI_PARTY_MAKER_REQ );							// 파티 생성 요청 ); 천하제일무도회 테스트용
	PACKETNAME_INSERT( UG_BUDOKAI_SOCIAL_ACTION );

	PACKETNAME_INSERT( UG_BUDOKAI_GM_BUDOKAI_SERVER_ENTER_REQ );				// 천하제일무도회 서버로 텔레포트 요청
	PACKETNAME_INSERT( UG_BUDOKAI_GM_BUDOKAI_SERVER_LEAVE_REQ );				// 천하제일무도회 서버에서 원래 서버로 이동
	PACKETNAME_INSERT( UG_BUDOKAI_GM_MATCH_PROGRESS_INFO_REQ );				// 경기 진행 정보 요청
	PACKETNAME_INSERT( UG_BUDOKAI_GM_MATCH_ARENA_ENTER_REQ );				// 경기장 들어가기
	PACKETNAME_INSERT( UG_BUDOKAI_GM_MATCH_ARENA_LEAVE_REQ );				// 경기장 나가기

	PACKETNAME_INSERT( UG_SCOUTER_TURN_ON );									// 스카우터 상태 온
	PACKETNAME_INSERT( UG_SCOUTER_TURN_OFF );								// 스카우터 상태 오프
	PACKETNAME_INSERT( UG_SCOUTER_ITEM_SELL_REQ );							// 스카우터를 통한 아이템 팔기

	PACKETNAME_INSERT( UG_SHOP_EVENTITEM_START_REQ );						// [7/15/2008 SGpro]
	PACKETNAME_INSERT( UG_SHOP_EVENTITEM_BUY_REQ );							// [7/11/2008 SGpro]
	PACKETNAME_INSERT( UG_SHOP_EVENTITEM_END_REQ );							// [7/15/2008 SGpro]
	PACKETNAME_INSERT( UG_SHOP_GAMBLE_BUY_REQ );							// [7/11/2008 SGpro]
	PACKETNAME_INSERT( UG_PARTY_DIFF_CHANGE_REQ );							// party dungeon diff change
	PACKETNAME_INSERT( UG_PARTY_DUNGEON_INIT_REQ );							// party dungeon Init
	PACKETNAME_INSERT( UG_SKILL_INIT_REQ );
	PACKETNAME_INSERT( UG_TELEPORT_CONFIRM_REQ );
	PACKETNAME_INSERT( UG_VEHICLE_DIRECT_PLAY_CANCEL_NFY );
	PACKETNAME_INSERT( UG_VEHICLE_END_REQ );								// 탈 것 사용 중지.
	PACKETNAME_INSERT( UG_VEHICLE_STUNT_NFY );							// 스페이스 바 누름(탈것)
	PACKETNAME_INSERT( UG_VEHICLE_FUEL_REMOVE_NFY );
	PACKETNAME_INSERT( UG_DOJO_CREATE_REQ );
	PACKETNAME_INSERT( UG_DOJO_DELETE_REQ );
	PACKETNAME_INSERT( UG_DOJO_FUNCTION_ADD_REQ );
	PACKETNAME_INSERT( UG_DOGI_CREATE_REQ );								// 도복생성
	PACKETNAME_INSERT( UG_DOGI_CHANGE_REQ );								// 도복변경
	PACKETNAME_INSERT( UG_GUILD_DOGI_CREATE_REQ );						// 유파도복생성
	PACKETNAME_INSERT( UG_GUILD_DOGI_CHANGE_REQ );						// 유파도복변경
	PACKETNAME_INSERT( UG_DOJO_SCRAMBLE_REQ );							// 도장쟁탈전 신청
	PACKETNAME_INSERT( UG_DOJO_SCRAMBLE_RESPONSE_REQ );					// 도장쟁탈전 신청에 대한 응답
	PACKETNAME_INSERT( UG_SHOP_NETPYITEM_START_REQ );
	PACKETNAME_INSERT( UG_SHOP_NETPYITEM_BUY_REQ );
	PACKETNAME_INSERT( UG_SHOP_NETPYITEM_END_REQ );
	PACKETNAME_INSERT( UG_WORLD_MAP_STATUS );
	PACKETNAME_INSERT( UG_DOJO_NPC_INFO_REQ );							// 도장NPC에게 정보요청
	PACKETNAME_INSERT( UG_GAMEGUARD_AUTH_ANSWER_RES );
	PACKETNAME_INSERT( UG_GAMEGUARD_HACK_INFO_NFY );
	PACKETNAME_INSERT( UG_SKILL_CASTING_CANCELED_NFY );					// 스킬 캐스팅 취소 알림
	PACKETNAME_INSERT( UG_PET_ATTACK_TARGET_NFY );						// 펫의 전투 참여

	PACKETNAME_INSERT( UT_ENTER_CHAT );
	PACKETNAME_INSERT( UT_CHAT_MESSAGE_SAY );
	PACKETNAME_INSERT( UT_CHAT_MESSAGE_SHOUT );
	PACKETNAME_INSERT( UT_CHAT_MESSAGE_WHISPER );
	PACKETNAME_INSERT( UT_CHAT_MESSAGE_PARTY );
	PACKETNAME_INSERT( UT_CHAT_MESSAGE_GUILD );
	PACKETNAME_INSERT( UT_GUILD_DISBAND_REQ );								// 길드 해체하기
	PACKETNAME_INSERT( UT_GUILD_DISBAND_CANCEL_REQ );						// 길드 해체 취소하기
	PACKETNAME_INSERT( UT_GUILD_RESPONSE_INVITATION );						// 길드 초대에 대한 대답 보내기
	PACKETNAME_INSERT( UT_GUILD_LEAVE_REQ );									// 길드 탈퇴하기
	PACKETNAME_INSERT( UT_GUILD_KICK_OUT_REQ );								// 길드 멤버 강제로 탈퇴시키기
	PACKETNAME_INSERT( UT_GUILD_APPOINT_SECOND_MASTER_REQ );					// 길드 멤버를 Second Master로 임명하기
	PACKETNAME_INSERT( UT_GUILD_DISMISS_SECOND_MASTER_REQ );					// 길드 Second Master의 직위를 해제하기
	PACKETNAME_INSERT( UT_GUILD_CHANGE_GUILD_MASTER_REQ );					// 길드 마스터를 이양하기
	PACKETNAME_INSERT( UT_FRIEND_ADD_REQ );		// 친구 추가
	PACKETNAME_INSERT( UT_FRIEND_DEL_REQ );		// 친구 삭제
	PACKETNAME_INSERT( UT_FRIEND_MOVE_REQ );		// 친구 -> 블랙리스트로 이동
	PACKETNAME_INSERT( UT_FRIEND_BLACK_ADD_REQ );		// 친구 블랙 리스트 추가
	PACKETNAME_INSERT( UT_FRIEND_BLACK_DEL_REQ );		// 친구 블랙 리스트 삭제
	PACKETNAME_INSERT( UT_RANKBATTLE_RANK_LIST_REQ );
	PACKETNAME_INSERT( UT_RANKBATTLE_RANK_FIND_CHARACTER_REQ );
	PACKETNAME_INSERT( UT_RANKBATTLE_RANK_COMPARE_DAY_REQ );

	PACKETNAME_INSERT( UT_GUILD_CHANGE_NOTICE_REQ );
	PACKETNAME_INSERT( UT_TMQ_RECORD_LIST_REQ );
	PACKETNAME_INSERT( UT_TMQ_MEMBER_LIST_REQ );
	PACKETNAME_INSERT( UT_BUDOKAI_TOURNAMENT_INDIVIDUAL_LIST_REQ );
	PACKETNAME_INSERT( UT_BUDOKAI_TOURNAMENT_INDIVIDUAL_INFO_REQ );
	PACKETNAME_INSERT( UT_BUDOKAI_TOURNAMENT_TEAM_LIST_REQ );
	PACKETNAME_INSERT( UT_BUDOKAI_TOURNAMENT_TEAM_INFO_REQ );
	PACKETNAME_INSERT( UT_PETITION_CHAT_START_RES );							// [ by sooshia 2008-10-15 ]
	PACKETNAME_INSERT( UT_PETITION_CHAT_USER_SAY_REQ );						// 유저가 말한 내용 [ by sooshia 2008-10-16 ]
	PACKETNAME_INSERT( UT_PETITION_CHAT_USER_END_NFY );						// [ by sooshia 2008-10-17 ]
	PACKETNAME_INSERT( UT_PETITION_CHAT_GM_SAY_RES );						// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( UT_PETITION_USER_INSERT_REQ );						// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( UT_PETITION_CONTENT_MODIFY_REQ );						// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( UT_PETITION_SATISFACTION_NFY );						// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( UT_PETITION_USER_CANCEL_REQ );						// [ by sooshia 2008-10-18 ]
	PACKETNAME_INSERT( UT_DOJO_BUDOKAI_SEED_ADD_REQ );
	PACKETNAME_INSERT( UT_DOJO_BUDOKAI_SEED_DEL_REQ );
	PACKETNAME_INSERT( UT_DOJO_NOTICE_CHANGE_REQ );
#endif
}